{"version":3,"file":"static/js/860.212edae7.chunk.js","mappings":"sNACMA,GAAaC,EAAAA,EAAAA,eAAc,MACpBC,EAAgB,WAAH,OAASC,EAAAA,EAAAA,YAAWH,EAAW,EAC5CI,EAAqB,SAAH,GAA6B,IAAvBC,EAAQ,EAARA,SAAUC,EAAK,EAALA,MAC7C,GAAsBC,EAAAA,EAAAA,UAAS,MAAK,eAA7BC,EAAG,KAAEC,EAAM,KAClB,GAA4CF,EAAAA,EAAAA,UAAS,MAAK,eAAnDG,EAAc,KAAEC,EAAiB,KACxC,OACE,SAACX,EAAWY,SAAQ,CAACN,OAAK,kBAAOA,GAAK,IAAEE,IAAAA,EAAKC,OAAAA,EAAQC,eAAAA,EAAgBC,kBAAAA,IAAoB,SACtFN,GAGP,C,+DCGA,UAX4B,WAC1B,IAAQQ,GAAWX,EAAAA,EAAAA,MAAXW,OAGR,OAFoBC,EAAAA,EAAAA,KAAZC,QAEOP,KAAI,SAACQ,EAAQC,GAC1B,OACE,SAACJ,EAAM,CAACK,IAAKF,EAAOE,IAAKC,IAAKH,EAAOI,KAAUH,EAEnD,GACF,C,qFCHMI,E,QAAoBC,EAAAA,KAAe,SAAAN,GAAM,yBAC1CA,GAAM,IACTO,KAAKC,EAAAA,EAAAA,IAAM,CAACR,EAAOI,IAAKJ,EAAOE,OAAK,IAGhCO,GAAwBC,EAAAA,EAAAA,UAAQ,SAACR,EAAKE,GAE1C,IAAMO,GAAWH,EAAAA,EAAAA,IAAM,CAACJ,EAAKF,IAI7B,OAAOU,EAAAA,EAAAA,QACLP,EAAkBb,KAAI,SAAAQ,GAAM,yBACvBA,GAAM,IACTa,UAAUA,EAAAA,EAAAA,GAASF,EAAUX,EAAOO,MAAI,IAE1C,WAEJ,IA4BA,IA1ByB,WAEvB,OAA8EO,EAAAA,EAAAA,KAAtEC,EAAM,EAANA,OAAQC,EAAW,EAAXA,YAAaC,EAAsB,EAAtBA,uBAAwBC,EAAoB,EAApBA,sBACrDC,EAAAA,EAAAA,YAAU,WACHD,GACHF,GAIJ,GAAG,IAEH,IAAMjB,GAAUqB,EAAAA,EAAAA,UAAQ,WACtB,OAAKL,EAGEN,EAAsBM,EAAOM,SAAUN,EAAOO,WAAWC,MAAM,EAAG,IAHrD,EAItB,GAAG,CAACR,IAGJ,MAAO,CACLE,uBAAAA,EACAC,qBAAAA,EACAH,OAAAA,EACAhB,QAAAA,EAEJ,C","sources":["components/Map/context.js","components/NearbyCinemaMarkers.jsx","data/nearbyCinemas.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react'\nconst MapContext = createContext(null)\nexport const useMapContext = () => useContext(MapContext)\nexport const MapContextProvider = ({ children, value }) => {\n  const [map, setMap] = useState(null)\n  const [selectedCinema, setSelectedCinema] = useState(null)\n  return (\n    <MapContext.Provider value={{ ...value, map, setMap, selectedCinema, setSelectedCinema }}>\n      {children}\n    </MapContext.Provider>\n  )\n}\nexport default MapContext\n","import useNearbyCinemas from \"../data/nearbyCinemas\";\nimport { useMapContext } from './Map/context';\n\nconst NearbyCinemaMarkers = () => {\n  const { Marker } = useMapContext();\n  const { cinemas } = useNearbyCinemas();\n\n  return cinemas.map((cinema, idx) => {\n    return (\n      <Marker lat={cinema.lat} lon={cinema.lng} key={idx} />\n    )\n  })\n};\n\nexport default NearbyCinemaMarkers;","import { useEffect, useMemo } from \"react\";\nimport { useGeolocated } from \"react-geolocated\";\nimport { point } from '@turf/helpers';\nimport distance from '@turf/distance';\nimport { sortBy, memoize } from 'lodash';\nimport allCinemas from \"./cinemas\";\n\n// Manually add a point to each cinema this is to be used during comparisons later\n// and will prevent this point needing to be regenerated every time we're recompute & sorting cinemas.\nconst cinemasWithPoints = allCinemas.map(cinema => ({\n  ...cinema,\n  loc: point([cinema.lng, cinema.lat]),\n}));\n\nconst computeCinemaDistance = memoize((lat, lng) => {\n  // Create this point to use later for the same reason as above.\n  const location = point([lng, lat]);\n\n  // Compute and add distance between point above and the cinema's point\n  // then sortBy distance\n  return sortBy(\n    cinemasWithPoints.map(cinema => ({\n      ...cinema,\n      distance: distance(location, cinema.loc)\n    })),\n    'distance'\n  )\n});\n\nconst useNearbyCinemas = () => {\n  // Use library's hook to get coords of location\n  const { coords, getPosition, isGeolocationAvailable, isGeolocationEnabled } = useGeolocated();\n  useEffect(() => {\n    if (!isGeolocationEnabled) {\n      getPosition();\n    }\n  // Disabling eslint's warning as we want this to only occur onMount\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cinemas = useMemo(() => {\n    if (!coords) return [];\n\n    // when we have coords, find nearest 15 cinemas\n    return computeCinemaDistance(coords.latitude, coords.longitude).slice(0, 15);\n  }, [coords]);\n\n  // return status of location api lookup and list of cinemas\n  return {\n    isGeolocationAvailable,\n    isGeolocationEnabled,\n    coords,\n    cinemas,\n  }\n}\nexport default useNearbyCinemas;"],"names":["MapContext","createContext","useMapContext","useContext","MapContextProvider","children","value","useState","map","setMap","selectedCinema","setSelectedCinema","Provider","Marker","useNearbyCinemas","cinemas","cinema","idx","lat","lon","lng","cinemasWithPoints","allCinemas","loc","point","computeCinemaDistance","memoize","location","sortBy","distance","useGeolocated","coords","getPosition","isGeolocationAvailable","isGeolocationEnabled","useEffect","useMemo","latitude","longitude","slice"],"sourceRoot":""}