{"version":3,"file":"static/js/838.9ebb1394.chunk.js","mappings":"+SAmBAA,EAAAA,KAAAA,QAAAA,UAAAA,QAAAA,QAAyCC,EACzCD,EAAAA,KAAAA,QAAAA,UAAAA,QAAAA,cAA+CE,EAC/CF,EAAAA,KAAAA,QAAAA,UAAAA,QAAAA,UAA2CG,EAE3C,IAAMC,EAA2B,WAC/B,IAAQC,GAAoBC,EAAAA,EAAAA,MAApBD,gBACFE,GAAMC,EAAAA,EAAAA,MAQZ,OAPAC,EAAAA,EAAAA,GAAiB,cAAc,YAA+B,IAAD,IAA3BC,OAAUC,EAAG,EAAHA,IAAKC,EAAG,EAAHA,IAC/C,IACEL,EAAIM,MAAM,CAACF,EAAKC,GAAM,GAAI,CAAEE,SAAU,GAAKC,cAAe,GAG5D,CAFE,MAAOC,GACPX,EAAgB,mDAAoD,CAAEY,QAAS,SACjF,CACF,IACO,IACT,EAEMC,EAAgB,SAAH,sBAAKC,EAAC,KAAEC,EAAC,KAAEJ,EAAC,KAAG,MAAM,CAAC,CAACI,EAAGD,GAAI,CAAf,KAAmBH,GAAG,EAElDK,EAAgB,WACpB,IAAMd,GAAMC,EAAAA,EAAAA,MACZ,GAAwCc,EAAAA,EAAAA,UAAS,MAAK,eAA/CC,EAAY,KAAEC,EAAe,KAC9BC,GAASC,EAAAA,EAAAA,MACTC,GAAUC,EAAAA,EAAAA,UAAQ,WACtB,GAAIH,EAAOI,aAAeJ,EAAOK,YAAa,CAC5C,IAAQD,EAA6BJ,EAA7BI,YAAaC,EAAgBL,EAAhBK,YACrB,OAAOC,EAAAA,EAAAA,QAAkB,SAAAC,GAAM,OACZ,gBAAhBH,GAAiCG,EAAOC,YAAcJ,IACvDG,EAAOF,cAAgBA,CAAW,GAEtC,CACA,OAAOC,EAAAA,CACT,GAAG,CAACN,IAEJ,OACE,gCACGE,EAAQpB,KAAI,SAACyB,EAAQE,GAAG,OACvB,SAAC,IAAM,CAELC,SAAU,CAACH,EAAOrB,IAAKqB,EAAOpB,KAC9BwB,cAAe,CACbC,MAAO,WACL9B,EAAIM,MAAM,CAACmB,EAAOrB,IAAKqB,EAAOpB,KAAM,IACpCY,EAAgBQ,EAClB,IANGE,EAQL,IAGHX,IACC,SAAC,IAAK,CACJY,SAAU,CAACZ,EAAaZ,IAAKY,EAAaX,KAC1C0B,cAAc,EACdC,QAAS,kBAAMf,EAAgB,KAAK,EAAC,UAErC,4BACE,wBAAKD,EAAaiB,QAClB,uBAAIjB,EAAakB,UAChBlB,EAAamB,cAAe,uBAAInB,EAAamB,qBAM1D,EAsBA,UApBmB,WAAH,OACd,UAAC,IAAY,CACXC,OAAQzB,EAAc0B,EAAAA,GACtBC,MAAO,CAAEC,OAAQ,OAAQC,gBAAiB,WAC1CC,SAAU,GACVC,UAAW,GAAI,WAEf,SAAC7C,EAAwB,KACzB,SAAC,IAAS,CACR8C,YAAY,wHACZC,IAAI,yEACJC,WAAW,OACXC,QAAS,EACTC,QAAS,GACTC,IAAI,SAEN,SAAClC,EAAa,MACD,C,oEC3FJuB,EAJmBY,OAAOC,OALjB,CACpBC,GAAI,CAAC,YAAa,UAAW,YAAa,WAC1CC,GAAI,CAAC,YAAa,UAAW,YAAa,aAOAC,QAC1C,iCAAEC,EAAE,KAAEC,EAAE,KAAEC,EAAE,KAAEC,EAAE,oBAAIC,EAAE,KAAEC,EAAE,KAAEC,EAAE,KAAEC,EAAE,WAAO,CACvCC,KAAKC,IAAIT,EAAII,GACbI,KAAKC,IAAIR,EAAII,GACbG,KAAKE,IAAIR,EAAII,GACbE,KAAKE,IAAIP,EAAII,GACd,G","sources":["components/Map/LeafletMap.jsx","data/bounds.js"],"sourcesContent":["import React, { useMemo, useState } from 'react'\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Popup,\n  useMap\n} from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport { Icon } from 'leaflet'\nimport markerIcon2x from 'leaflet/dist/images/marker-icon-2x.png'\nimport markerShadow from 'leaflet/dist/images/marker-shadow.png'\nimport markerIcon from 'leaflet/dist/images/marker-icon.png'\nimport useEventListener from '@use-it/event-listener'\nimport { useSnackbar } from 'notistack'\nimport { useParams } from 'react-router-dom'\nimport allCinemas from '../../data/cinemas'\nimport { totalBounds } from '../../data/bounds'\n\nIcon.Default.prototype.options.iconUrl = markerIcon\nIcon.Default.prototype.options.iconRetinaUrl = markerIcon2x\nIcon.Default.prototype.options.shadowUrl = markerShadow\n\nconst MapSnappingEventListener = () => {\n  const { enqueueSnackbar } = useSnackbar()\n  const map = useMap()\n  useEventListener('map.snapTo', ({ detail: { lat, lng } }) => {\n    try {\n      map.flyTo([lat, lng], 14, { duration: 0.5, easeLinearity: 1 })\n    } catch (e) {\n      enqueueSnackbar('Unexpected error while attempting map navigation', { variant: 'error' })\n    }\n  })\n  return null\n}\n\nconst convertBounds = ([w, s, e, n]) => [[s, w], [n, e]]\n\nconst CinemaMarkers = () => {\n  const map = useMap()\n  const [activeCinema, setActiveCinema] = useState(null)\n  const params = useParams()\n  const cinemas = useMemo(() => {\n    if (params.franchiseId || params.countryCode) {\n      const { franchiseId, countryCode } = params\n      return allCinemas.filter(cinema =>\n        (franchiseId === 'all-cinemas' || cinema.franchise === franchiseId) &&\n        cinema.countryCode === countryCode\n      )\n    }\n    return allCinemas\n  }, [params])\n\n  return (\n    <>\n      {cinemas.map((cinema, idx) => (\n        <Marker\n          key={idx}\n          position={[cinema.lat, cinema.lng]}\n          eventHandlers={{\n            click: () => {\n              map.flyTo([cinema.lat, cinema.lng], 15)\n              setActiveCinema(cinema)\n            }\n          }}\n        />\n      ))}\n\n      {activeCinema && (\n        <Popup\n          position={[activeCinema.lat, activeCinema.lng]}\n          closeOnClick={false}\n          onClose={() => setActiveCinema(null)}\n        >\n          <div>\n            <h3>{activeCinema.name}</h3>\n            <p>{activeCinema.address}</p>\n            {activeCinema.phoneNumber && <p>{activeCinema.phoneNumber}</p>}\n          </div>\n        </Popup>\n      )}\n    </>\n  )\n}\n\nconst LeafletMap = () => (\n  <MapContainer\n    bounds={convertBounds(totalBounds)}\n    style={{ height: '100%', backgroundColor: '#99b3cc' }}\n    zoomSnap={0.5}\n    zoomDelta={0.5}\n  >\n    <MapSnappingEventListener />\n    <TileLayer\n      attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, CC BY 3.0 — Map data © OpenStreetMap contributors'\n      url='https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}'\n      subdomains='abcd'\n      minZoom={0}\n      maxZoom={18}\n      ext='png'\n    />\n    <CinemaMarkers />\n  </MapContainer>\n)\n\nexport default LeafletMap\n","// Country bounds drawn via http://bboxfinder.com/\n// they are currently in the follow format [W, S, E, N]\nconst countryBounds = {\n  au: [112.669086, -43.696673, 153.726368, -10.737187],\n  nz: [166.332922, -47.292562, 178.573837, -34.394162],\n}\n// 166.509144322, -46.641235447, 178.517093541, -34.4506617165\nexport const allCountryBounds = Object.values(countryBounds);\n// latitude is West (-) to East (+)\n// longitude is North (+) to South (-)\n\nexport const totalBounds = allCountryBounds.reduce(\n  ([w1, s1, e1, n1], [w2, s2, e2, n2]) => ([\n    Math.min(w1, w2),\n    Math.min(s1, s2),\n    Math.max(e1, e2),\n    Math.max(n1, n2),\n  ])\n)"],"names":["Icon","markerIcon","markerIcon2x","markerShadow","MapSnappingEventListener","enqueueSnackbar","useSnackbar","map","useMap","useEventListener","detail","lat","lng","flyTo","duration","easeLinearity","e","variant","convertBounds","w","s","CinemaMarkers","useState","activeCinema","setActiveCinema","params","useParams","cinemas","useMemo","franchiseId","countryCode","allCinemas","cinema","franchise","idx","position","eventHandlers","click","closeOnClick","onClose","name","address","phoneNumber","bounds","totalBounds","style","height","backgroundColor","zoomSnap","zoomDelta","attribution","url","subdomains","minZoom","maxZoom","ext","Object","values","au","nz","reduce","w1","s1","e1","n1","w2","s2","e2","n2","Math","min","max"],"sourceRoot":""}